<?php

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function country_node_info() {
  return array(
    'country' => array(
      'name' => t('Country Type'),
      'base' => 'country',
      'description' => t('Country Content Type.'),
      'title_label' => t('Name'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_type_insert().
 */
function country_node_type_insert($content_type) {
  if ($content_type->type == 'country') {
    // add body field for country content type
    $types = node_type_get_types();
    node_add_body_field($types['country']);

    // Create all the fields we are adding to our content type.
    foreach (_country_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_country_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'country';
      field_create_instance($instance);
    }
  }
}

/**
 * Implement hook_form().
 */
function country_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function country_add_taxonomies() {
  if (taxonomy_vocabulary_machine_name_load('country_category') == FALSE) {
    taxonomy_vocabulary_save((object) array(
          'name' => 'Country Category',
          'machine_name' => 'country_category',
          'description' => 'Country profile category'
    ));
  }

  if (taxonomy_vocabulary_machine_name_load('country_type') == FALSE) {
    taxonomy_vocabulary_save((object) array(
          'name' => 'Country Type',
          'machine_name' => 'country_type',
          'description' => 'Country profile type'
    ));
  }

  $vocabularies = taxonomy_vocabulary_get_names();
  $country_categories = array(
    'Party', 'Non-Party', 'Dependent territory'
  );

  foreach ($country_categories as $category) {
    $term_array = taxonomy_get_term_by_name($category, 'country_category');
    if (empty($term_array)) {
      taxonomy_term_save((object) array(
            'vid' => $vocabularies['country_category']->vid,
            'name' => $category
      ));
    }
  }

  $country_types = array(
    'Accession', 'Acceptance', 'Approval', 'Continuation', 'Ratification', 'Succession'
  );
  foreach ($country_types as $type) {
    $term_array = taxonomy_get_term_by_name($type, 'country_type');
    if (empty($term_array)) {
      taxonomy_term_save((object) array(
            'vid' => $vocabularies['country_type']->vid,
            'name' => $type
      ));
    }
  }
}

/**
 * Define the fields for our content type.
 */
function _country_installed_fields() {
  $fields = array();

  $fields['field_country_official_name'] = array(
    'field_name' => 'field_country_official_name',
    'cardinality' => 1,
    'type' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 1,
  );

  $fields['field_country_iso2'] = array(
    'field_name' => 'field_country_iso2',
    'cardinality' => 1,
    'type' => 'text',
    'translatable' => 1,
  );

  $fields['field_country_iso3'] = array(
    'field_name' => 'field_country_iso3',
    'cardinality' => 1,
    'type' => 'text',
    'translatable' => 1,
  );

  $fields['field_country_category'] = array(
    'field_name' => 'field_country_category',
    'cardinality' => 1,
    'type' => 'taxonomy_term_reference',
    'translatable' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'country_category',
          'parent' => 0,
        ),
      ),
    ),
  );

  $fields['field_country_dependent_teritory'] = array(
    'field_name' => 'field_country_dependent_teritory',
    'cardinality' => 1,
    'translatable' => 1,
    'type' => 'text'
  );

  $fields['field_country_date_of_joining'] = array(
    'field_name' => 'field_country_date_of_joining',
    'cardinality' => 1,
    'translatable' => 1,
    'type' => 'datetime',
    'settings' => array(
      'repeat' => 0,
      'todate' => '',
      'granularity' => array(
        'year' => 'year',
        'month' => 'month',
        'day' => 'day',
      ),
      'tz_handling' => 'none',
      'timezone_db' => ''
    )
  );

  $fields['field_country_type'] = array(
    'field_name' => 'field_country_type',
    'cardinality' => 1,
    'translatable' => 1,
    'type' => 'taxonomy_term_reference',
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'country_type',
          'parent' => 0,
        ),
      ),
    ),
  );

  $fields['field_country_entry_into_force'] = array(
    'field_name' => 'field_country_entry_into_force',
    'cardinality' => 1,
    'translatable' => 1,
    'type' => 'datetime',
    'settings' => array(
      'repeat' => 0,
      'todate' => '',
      'granularity' => array(
        'year' => 'year',
        'month' => 'month',
        'day' => 'day',
      ),
      'tz_handling' => 'none',
      'timezone_db' => ''
    )
  );

  $fields['field_country_entry_note'] = array(
    'field_name' => 'field_country_entry_note',
    'module' => 'text',
    'cardinality' => 1,
    'translatable' => 1,
    'type' => 'text_long'
  );

  $fields['field_country_country_link'] = array(
    'field_name' => 'field_country_country_link',
    'module' => 'link',
    'settings' => array(
      'attributes' => array(
        'class' => '',
        'rel' => '',
        'target' => 'default',
      ),
      'display' => array(
        'url_cutoff' => 80,
      ),
      'enable_tokens' => 1,
      'entity_translation_sync' => FALSE,
      'profile2_private' => FALSE,
      'title' => 'optional',
      'title_maxlength' => 128,
      'title_value' => '',
      'url' => 0,
    ),
    'translatable' => 1,
    'type' => 'link_field',
  );

  return $fields;
}

/**
 * Define the field instances for our content type.
 */
function _country_installed_instances() {
  $instances = array();

  /* if (module_exists('entity_translation')) {
    $instances['node-country-title_field'] = array(
    'bundle'        => 'country',
    'default_value' => NULL,
    'deleted'       => 0,
    'description'   => '',
    'display'       => array(
    'default' => array(
    'label'    => 'above',
    'settings' => array(),
    'type'     => 'hidden',
    'weight'   => 0
    ),
    'teaser' => array(
    'label'    => 'above',
    'settings' => array(),
    'type'     => 'hidden',
    'weight'   => 0
    )
    ),
    'entity_type' => 'node',
    'field_name'  => 'title_field',
    'label'       => 'Title',
    'required'    => TRUE,
    'settings'    => array(
    'entity_translation_sync' => FALSE,
    'hide_label'              => array(
    'entity' => FALSE,
    'page'   => FALSE
    ),
    'text_processing'    => 0,
    'user_register_form' => FALSE
    ),
    'widget' => array(
    'module'   => 'text',
    'settings' => array(
    'size' => 60
    ),
    'type'   => 'text_textfield',
    'weight' => -5
    )
    );
    } */

  $instances['field_country_official_name'] = array(
    'field_name' => 'field_country_official_name',
    'label' => t('Official name'),
    'widget' => array(
      'type' => 'text_textfield'
    )
  );

  $instances['field_country_iso2'] = array(
    'field_name' => 'field_country_iso2',
    'label' => t('ISO 3166-2 code'),
    'widget' => array(
      'type' => 'text_textfield'
    )
  );

  $instances['field_country_iso3'] = array(
    'field_name' => 'field_country_iso3',
    'label' => t('ISO 3166-3 code'),
    'widget' => array(
      'type' => 'text_textfield'
    )
  );

  $instances['field_country_category'] = array(
    'field_name' => 'field_country_category',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'type' => 'options_select',
      'weight' => 10
    ),
    'label' => t('Country category')
  );

  $instances['field_country_dependent_teritory'] = array(
    'field_name' => 'field_country_dependent_teritory',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'weight' => 11
    ),
    'label' => t('Dependent teritory')
  );

  $instances['field_country_date_of_joining'] = array(
    'field_name' => 'field_country_date_of_joining',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'weight' => 12,
    ),
    'label' => t('Date of joining')
  );

  $instances['field_country_type'] = array(
    'field_name' => 'field_country_type',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'type' => 'options_select',
      'weight' => 13
    ),
    'label' => t('Type')
  );

  $instances['field_country_entry_into_force'] = array(
    'field_name' => 'field_country_entry_into_force',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'weight' => 14,
    ),
    'label' => t('Entry into force')
  );

  $instances['field_country_entry_note'] = array(
    'field_name' => 'field_country_entry_note',
    'entity_type' => 'node',
    'bundle' => 'country',
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => 15,
    ),
    'label' => t('Entry note')
  );

  $instances['field_country_country_link'] = array(
    'bundle' => 'country',
    'entity_type' => 'node',
    'field_name' => 'field_country_country_link',
    'label' => t('Cross-reference between overseas territories and main land'),
    'required' => 0,
    'settings' => array(
      'attributes' => array(
        'class' => '',
        'configurable_title' => 0,
        'rel' => '',
        'target' => 'default',
        'title' => '',
      ),
      'display' => array(
        'url_cutoff' => 80,
      ),
      'enable_tokens' => 1,
      'entity_translation_sync' => FALSE,
      'rel_remove' => 'default',
      'title' => 'optional',
      'title_maxlength' => 128,
      'title_value' => '',
      'url' => 0,
      'user_register_form' => FALSE,
      'validate_url' => 1,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'link',
      'settings' => array(),
      'type' => 'link_field',
      'weight' => 16,
    ),
  );

  return $instances;
}

class Country extends CitesBase {

  public static $bundle = 'country';
  public static $CACHE_ALL_OBJECTS = 'country_cache_all_countries';

  /**
   * Create new country
   * @param string $name Common name in English
   * @param string $official_name Country official name
   * @param string $iso2 ISO 3166-2 code (2-letter code)
   * @param string $iso3 ISO 3166-3 code (3-letter code)
   * @return stdClass Drupal node object
   */
  static function node_create($name, $iso2, $iso3 = '', $official_name = '') {
    if (empty($name) || empty($iso2)) {
      self::println('Cannot create a country without name (%s) and ISO2 (%s) code', $name, $iso2);
      return NULL;
    }
    $node = self::drupal_node_create($name, self::$bundle);
    self::set_field_single_value($node, 'field_country_official_name', array('field_country_official_name' => $official_name));
    self::set_field_single_value($node, 'field_country_iso2', array('field_country_iso2' => $iso2));
    self::set_field_single_value($node, 'field_country_iso3', array('field_country_iso3' => $iso3));
    node_save($node);
    self::cache_clear();
    return $node;
  }

  /**
   * Install countries from countries.json
   */
  static function import_default_countries() {
    $path = dirname(__FILE__) . DIRECTORY_SEPARATOR . 'country.json';
    $json = self::read_json($path);
    self::println('Found %d countries ...', count($json));
    $count = 0;
    foreach ($json as $c) {
      $iso2 = strtolower($c->code2l);
      $iso3 = strtolower($c->code3l);
      if (Country::get_by_iso2($iso2) == NULL) {
        Country::node_create($c->name, $iso2, $iso3, $c->official_name);
        $count++;
        echo sprintf('%d ', $count);
      }
    }
    echo "\n";
    self::println('Imported %d countries ...', $count);
  }

  /**
   * Retrieve a country by its name (short name or official name)
   * @param string $name Country name (case-insensitive)
   * @return object the Country object or NULL if the country dosen't exist
   */
  static function get_by_name($name) {
    if (empty($name)) {
      return NULL;
    }

    $result = NULL;
    $country = strtolower(trim($name));
    $names = self::list_keyed_by_name();

    if (array_key_exists($country, $names)) {
      $result = $names[$country];
    }

    return $result;
  }

  /**
   * Query and retrieve a country by its ISO 3166-2 unique code.
   * @param string $iso2 ISO 3166-2 code
   * @return object the Country object or NULL if the country doesn't exist
   */
  static function get_by_iso2($iso2) {
    if (empty($iso2)) {
      return NULL;
    }

    $result = NULL;
    $iso2_code = strtolower(trim($iso2));
    $countries = self::list_keyed_by_iso2();
    if (array_key_exists($iso2_code, $countries)) {
      $result = $countries[$iso2_code];
    }

    return $result;
  }

  /**
   * Retrieve the list of countries having array keys the country names in all variants (normal, uppercase, lowercase)
   * @return array Array, i.e. array('Romania' => $ob, 'ROMANIA' => $ob, 'romania' => $ob)
   */
  static function list_keyed_by_name() {
    $result = array();
    $countries = self::get_all_objects();
    foreach ($countries as $country) {
      $name = $country->title;
      $official_name = self::get_field_single_value($country, 'field_country_official_name');
      $result[$name] = $country;
      $result[strtolower($name)] = $country;
      $result[strtoupper($name)] = $country;
      $result[$official_name] = $country;
      $result[strtolower($official_name)] = $country;
      $result[strtoupper($official_name)] = $country;
    }
    return $result;
  }

  /**
   * Retrieve the list of countries having array keys the country ISO2l in all variants (normal, uppercase, lowercase)
   * @return array Array, i.e. array('Ro' => $ob, 'RO' => $ob, 'ro' => $ob)
   */
  static function list_keyed_by_iso2() {
    $result = array();
    $countries = self::get_all_objects();
    foreach ($countries as $country) {
      $iso2 = self::get_field_single_value($country, 'field_country_iso2');
      $result[$iso2] = $country;
      $result[strtolower($iso2)] = $country;
      $result[strtoupper($iso2)] = $country;
    }
    return $result;
  }

  /**
   * Retrieve all country objects from database
   * @return array Array of country objects
   */
  static function get_all_objects() {
    $cached_data = &drupal_static(self::$CACHE_ALL_OBJECTS);
    if (empty($cached_data)) {
      $query = new EntityFieldQuery();
      $query = $query->entityCondition('entity_type', 'node')->propertyCondition('type', 'country')->execute();
      if (isset($query['node'])) {
        foreach ($query['node'] as $row) {
          $cached_data[] = node_load($row->nid);
        }
      }
    }
    if ($cached_data === NULL) {
      $cached_data = array();
    }
    return $cached_data;
  }

  /**
   * Invalidate the cache data for this class
   */
  static function cache_clear() {
    drupal_static_reset(self::$CACHE_ALL_OBJECTS);
  }

}


/**
 * Implements hook_views_api().
 */
function country_views_api() {
  return array('api' => 3);
}
